HTML : 하이퍼 텍스트 마크업 언어 = 뼈대
CSS : 캐스팅 스타일 시트         = 옷
JS  : 자바스크립트               = 행동/동작

[JS]
    JavaScript
    - 요즘 트렌드에서 자바스크립트 매우 중요한 역할.
    1. 웰 클라이언트(HTML,CSS,JS)
    2. 웹 서버(node.js)
    3. 모바일(react.js native)
    4. 소프트웨어(NW.js)

[JS 사용하는 방법]
    방법1 : html 파일내 <body> 마크업 안에서 <script> 마크업 사용.
        <body>
            <script>
                js코드 작성
            </script>
        </body>    
    
    방법2(권장) : JS파일(.js) 생성하여 <head> 또는 <body> 마크업에서 js파일 불러온다.
        1. html 모두 렌더링(생성) 되기전에 js 실행
        <head>
            <script src="js파일경로"></script>
        <head>
        2. html 모두 렌더링(생성) 후에 js 실행 - body에 넣으면면

[데이터]
    - 데이터란? 한국어로는 자료, 컴퓨터언어가 이해하는 자료들, 리터럴
    1. 숫자 : 10, 3.14, 555 등등
    2. 문자 : '안녕' "안녕", `안녕`
    3. 논리 : true, false
    
[JS타입 / 자료형 / 분류]
    - 데이터들을 특정한 기준으로 분류한 것.
    - 기본타입
        1. 숫자타입 : Number    ex) 10, 3,14,53718
        2. 문자타입 : String    ex) '작은따옴표' 또는 "큰따옴표" 또는 `백틱`으로 감싼 자료
        3. 논리타입 : Boolean   ex) true, false

[JS 출력함수]
    1. console.log(출력할 값 또는 연산식) : 브라우저의 F12(개발자도구) 에서 

[JS 입력함수]
    1. prompt( )        : (팝업창) 알림 메시지와 입력(input) 기능 제공하는 함수.
    * 입력받은 값을 문자타입으로 반환 *  /  - 함수 1개당 입력창 1개개
        숫자 입력받기 : 1. Number(prompt()); - 타입변환환 - 문자 타입을 숫자 타입으로
                       2. 혹은  *1 
[이스케이프/제어 문자]
    1. \n : 줄바꿈
    2. \t : 들여쓰기
    3. \\ : \ 한개 출력
    4. \' : '한개 출력
    5. \" : "한개 출력력

[변수와 상수]
    - 공통 : 
        1. 데이터 1개를 저장할 수 있는 메모리 공간
        2. 메모리 공간의 상징적인 이름이 존재한다. 변수명, 상수명
        3. 자바와 다르게 변수타입이 자동으로 관리, 타입 명시할 필요 X
            - let/const로 선언 후 모든 자료를 저장할 수 있다.
    1. 변수 : 변하는 수/값
        1. 변수 선언 : let 키워드
            let 변수명;             *값이 없는 변수 호출시 undefined
        2. 변수 초기화 : 변수 선언시 처음에 값 대입 행위
            let 변수명 = 초기값;
        3. 변수 값 호출 : 변수명을 작성하면 변수가 갖는 값이 반항된다.
            변수명
        4. 변수 값 수정 : 기존 변수명을 호출해서 새로운 값 대입
            변수명 = 새로운 값
        5. 변수 연산 
            변수명A + 데이터 + 변수명B

    2. 상수 : 변하지 않는 수/값
        1. 상수 선언 : const 키워드
            const 상수명 = 초기값; * 상수는 무조건 초기값을 넣어야한다.
        2. 상수 값 호출
            상수명;
        3. 상수 값 수정 X : 불가능,
        4. 상수 연산
            상수명A + 데이터 + 상수명B

[연산자]
    - 연산(계산) 결과를 *하나*로 도출 하는 과정
    - 연산(계산)에 사용되는 기호/특수문자
    - 종류
        1. 산술연산자           : +덧셈, -밸셈, *곱셈, /나눗셈, %나머지
        2. 연결연산자           : + 앞뒤에 문자가 존재하면 덧셈이 아닌 연결을 한다.
        3. 비교연산자           : >초과 <미만 >=이상 <=이하 ==(값)같다 !=(값)다르다 ===(타입과 값)같다 !===(타입과 값)다르다
        4. 관계연산자           : && -> and  ////  || -> or  ////  ! : 부정(반대로)
        
        5.복합대입연산자
            = 오른쪽 항(값)를 왼쪽 항(변수)에 대입한다.
            += 오른쪽 항(값)를 횐쪽 항값과 더한 후에 왼쪽 항 (변수)에 대입한다.
            -=,*=,/=,%=
        
        6. 증감연산자 : 변수명 앞뒤에 ++ 또는 --입력하여 변수의 1증가 또는 감소, 빠른연산산
            ++변수명    : 선위증가  ++변수명; 선위감소
            변수명++    : 후위증가  변수명--; 후위감소

            *주의할점 : 1. 특정 변수에 1증가 코드 작성하시오.
                let value = 10;
                방법1) value = value + 1;
                방법2) value += 1;
                방법3) value++;
            2. ;(세미콜론)명령단위 기준으로 우선순위를 정한다.
                ++value; vs value++; ->                           결과 동일
                console.log(++value); vs console.log(value++); -> 결과 다름.

        7. 삼항연산자자 : 항이 3개라서 삼항연산자라고 한다.
            - 첫번째 항 : 조건을 넣는다.  두번째 항 : true일때 코드   세번째 항 : false일때코드
            - 조건 ? 참 : 거짓
            - (중첩) 조건1 ? 참1 : 조건2 ? 참2 : 거짓
                - 주로 간단한/짧은 논리조건은 삼함연산자, 복잡한조건은 IF조건 사용
                - react.js 의 조건부렌더링에서 주로 사용된다.

        , parseInt( 나누기 ) - 몫

[배열]
            1. 순서대로 번호가 붙인 원소들이 연속적인 형태로 구성된 데이터 *타입*
            2. 인덱스? 순서대로 배정된 번호, 0번 시작, 길이/총개수 : 3이면 인덱스 0,1,2
            3. 배열 선언 :
                1. [] 대괄호
                2. [] 안에서 요소들을 ,(쉼표)를 이용한 요소 구분하여 열거한다.
                let 변수명 = [값1, 값2, 값3]
            4. 배열의 전체 요소 호출
                배열변수명

            5. 배열의 특징 요소 호출
                배열변수명[인덱스]

            6. 배열 수정
                1. 배열변수를 전체 수정 :
                    배열변수명 = [새로운 배열열]
                2. 배열변수의 특정한 요소 값 수정
                    배열변수명[인덱스] = 새로운값

            7. 배열내 요소(값) 추가/삽입
                배열변수명.push(새로운값);                  : 맨뒤에 새로운 요소 추가
                배열변수명,splice(삽입인덱스,0,새로운값);    : 삽입인덱스의 새로운 요소 삽입, 삽입 인덱스 뒤로 삭제X

            8. 배열내 요소(값) 삭제
                배열변수명.splice(삭제인덱스, 삭제개수);     : 삭제 인덱스부터 개수만큼 요소 삭제

            9. 배열내 요소(값) 찾기
                배열변수명.indexOf(찾을값);                  : 배열내 찾을 값이 존재하면 찾은 인덱스, 없으면 -1 반환
                배열변수명.includes(찾을값);                 : 배열내 찾을 값이 존재하면 true, 없으면 false 반환

            10. 배열 요소 총 개수 알기
                배열변수명.length;  : 배열내 요소들의 총 개수를 반환
        
[문자열]
    1. "큰따옴표 또는 '작은따옴표 또는 `백틱 으로 감싼 데이터
    2. 이스케이프/제어문자
        \n : 줄바꿈
        \t : 들여쓰기
        \\ : \한개 출력, \' : '한개 출력, \" : "한개 출력
    3. `백틱 템플릿
        1. 문자열 사이에 ${} 표현식 이용한 연산식을 연결할 수 있다.
        2. `문자열A ${연산식} 문자열B ${연산식} 문자열C 문자열D`
        3. HTML과 JS가 같이 사용될 때 주로 사용됨. REACT(HTML+JS => 한파일)
            -HT(Text) M L -> 문자 타입만 가능한 언어
            -JS는 다양한 타입이 존재한 언어어

[DOM객체]
    document 객체
    1. 내장 함수
        document.quertSelector('선택자') : 선텍자의 마크업을 JS객체로 반환하는 함수
            -query(질의-요청할게)
            -Selector(선택자)
                -> 선택자를 요청한다.
                [선택자] : css 선텍지 동일, 1. 마크업명 2. .클래스명 3. #아이디명
                ex) document.quertSelector('ol') : html의 ol마크업을 JS객체로 요청한다.

    2. 내장 속성
        .innerHTML = `HTML코드`
            -inner(내부 = 현재 마크업 사이 content)
            -HTML ( HTML언어 )
                -> 현재 마크업의 넣을 html작성

[조건문]
    1. true와 false에 따른 흐름제어, 컴퓨터가 논리/비교(상황에 따른 판단)적인 사고력
    2. 조건찾기
        예) 내가 돈이 10000원이 있으면 택시를 타고 아니면 걸어가야겠다.
            조건 : 돈 >= 10000 참 : 택시탄다. 거짓 : 걸어간다.

[반복문]
    1. 조건을 충족할 때 특정 범위내 코드를 반복 실행
    2. for형태()
        for(초기값; 조건문; 증감식){
            실행문;
        }
        1. 초기값 : 반복을 할 때 반복의 카운터 하는 변수의 처음값
        2. 조건문 : 반복실행문이 실행되는 조건으로 true 이면 {실행문} 처리 하고 false 이면 for 종료
        3. 실행문 : 조건이 true 일 때 실행할 코드
        4. 증감식 : 반복변수의 증가 혹은 감소 변화 연산식

    3. 반복문 연습하는 방법
        - 반복문 없이 코드를 작성하고, 반복되는 코드와 반복되지 않는 코드, 패턴 찾기

    4. 배열과 반복문의 관계 
        1. 배열은 인덱스가 0부터 마지막 인덱스까지 1씩 증가 규칙
        2. 배열의 길이 : 배열변수명.length, 
                        -> 배열내 마지막 인덱스 : 배열변수명.length - 1
        3. 배열의 순회(전체조회) : 배열내 모든 요소를 하나씩 호출한 작업
        for(index = 0; index <= 배열변수명.length - 1; index++) {
            배열변수명[index]
        }
    
    5. 반복의 주요 키워드
        1. continue : 가장 가까운 for문의 증감식으로 코드흐름 이동.
        2. break : 가장 가까운 for문의 ( ) 종료/탈출/끝내기.
        
[함수] function
    1. 함(상자 함) 수(숫자 수)
        - 숫자들이 들어있는 상자 -> 상자에 미리 넣어둔 수
        - (수학) 1차함수 : y =  ax+b : 과거에 태어난 사람이 수와 관련된 연산을 공식화
        - (컴퓨터) 함수 : 미리 코드들을 정의하는 구조
        - 변수 ? 데이터/자료 1개 저장 vs 함수 ? 명령어/코드 들을 저장
            ! 저장 : 나중에 다시 사용하기 위해, 재활용성

    2. 함수 종류
        1) 내가 만든 함수 : 개발자가 함수를 직접 코드로 정의한 함수

        2) 미리 만들어진 함수(라이브러리) : 개발자가 미리 만들어진 함수를 사용.
            console.log(), document.quertSelector(), push(), splice() 등등 

    3. JS 함수 표현 방법
        1. 선언적 함수 : 선언 키워드를 이용하여 함수를 정의, function 함수명( ){}
        2. 익명 함수 : 함수명이 없이 정의, function(){}, let 변수명 = function(){}
        3. 람다식(화살표) 함수 : 선언키워드와 함수명 없이 => 화살표 정의하는 방법, () => {}, let 변수명 = () => {}
    
    4. JS 함수 만드는 방법 
        1. function         : 함수를 만들기 위한 함수 선언 키워드
        2. 함수명            : 관례적으로 카멜표기법 사용.  mycar -> mycar, studentscorelist -> studentScoreList
                             - 첫단어를 소문자로 시작, 두번째 단어의 첫 글자를대문자 표현
        3. (매개변수1, 매개변수2) : 함수 사용시 함수 안으로 들어오는 인수 값을 대입받는 매개변수
                - 인(들어갈 인) 수(숫자 수)
                - 매개변수
        4. { 명령어; } : 함수가 실행 될 때 처리할 명령어들의 구역
        5. return : 함수가 처리하고 함수를 호출했던 곳으로 반환 되는 데이터, 리턴값, 반환값

    5. JS함수 사용/호출 하는 방법
        정의한함수명(인수값, 인수값)    : 인수값이 각 함수의 매개변수에 대입되고 함수 실행후 함수의 return 반환 된다.

    6. Js함수 특징
        1. 코드의 재활용/사용 * 간소화
        2. 미리 정의된 코드의 매개변수에 따른 서로 다른 결과(리턴) 업을 수 있다.
        3. 협업에서 기능단위로 구분 할 수 있다.

    *믹서기(함수)
        1. 함수명 : mixFunc
        2. 매개변수 : 과일
        4. return : 과일주스

    7. 함수 주요 키워드
        1. 인수값 : 함수 호출시 함수로 전달하는 값
        2. 매개변수(parameter) : 함수 실행시 함수 안으로 들어온 인수를 대입하는 변수
            인수값 -- 대입 --> 매개변수
        3. 반환값 : 함수 종료시 함수를 호출했던 곳으로 되돌려 주는 값
        
[객체] : Object
    - 주체(Subject) : '나' 라는 실체
    - 객체(Object) (손님 객) '나'가 아닌 실체
        -> 프로그래밍에서 주체(개발자), 코드로 실체(객체) 생성
    1. 정의 : 물리적으로 존재하거나 논리적으로 존재하는 실체
    2. JS종류 :
            1. class-object 객체 : 클래스기반의 객체(자바,자바스크립트)  
            2. class-free-object 객체 : 클래스 없는 객체(자바스크립트)
            즉) js는 클래스(설계도)가 있어도 없어도 객체 생성 가능.
    3. JS객체 형태 : {속성명 : 값, 속성명 : 값, 속성명 : 값}
        1. {} 중괄호를 이용한 {}1개의 객체로 취급하고 각 여러 속성들은, (쉼표)로 구분한다.
        2. 속성이란 : 객체가 갖는 고유한 성질
            - 속성명 에는 변수명과 같이 상징적인 이름 역할 한다.
            - 속성에는 데이터/값, 함수, 배열, 객체 모든 타입들을 대입할 수 있다.
            - 속성명과 속성의 값은 : (콜론) 한쌍으로 구성한다.
    
    4. 객체를 만드는 방법
        1. {}                                       : 중괄호를 만든다.
        2. {속성명1 : 값, 속성명2 : 값}              : 속성명과 값을 한쌍으로 여러개 속성쌍을 정의한다.
        3. let 변수명 = {속성명1 : 값, 속성명2 : 값} : 주로 객체 생성후 변수에 대입한다.

    5. 객체를 호출하는 방법
        1. 객체 전체 호출 : 변수명
        2. 객체내 특정한 속성값 호출 : 변수명.속성명
        *] .(접근/도트)연산자는 변수가 갖는 객체의 속성을 참조할 때 사용한다.

    6. 객체내 특정 속성값 수정
        객체변수명.속성명 = 새로운 값;

    7. 객체내 특정 속성 삭제
        delete 객체변수명.속성명;
    
    8. 객체내 속성값이 가능한 타입, 객체내 속성에는 모든 타입을 대입할 수 있다.
    {
        속성명 : 리터럴,
        속성명 : 함수,
        속성명 : 배열,
        속성명 : 객체
    }

    9. 객체내 모든 속성명을 배열로 반환받기
        Object.keys(객체변수명)
        Object.keys(객체변수명).length : 객체내 속성 개수

[ DOM ]
    1. 정의 : Document(HTML) Object(객체) Model(모형물체)
        - HTML의 마크업들을 객체로 다루기 위한 API
        - JS회사에서는 미리 만들어진 HTML 조작 관련 객체 제공
    
    2. 주요 객체와 속성
        1. document     : 현재 JS가 포함된 HTML문서의 전반적인 정보를 갖는 객체
            - 현재 JS가 포함된 HTML문서의 전반적인 정보를 갖는 객체
        
        -메소드

        2. document.quertSelector('CSS선택자')
            - html문서내 css선택자의 마크업을 (DOM)객체로 반환하는 함수.
            - 만일 동일한 선택자가 다수일때는 첫번째 마크업을 가져온다.

        3. document.quertSelectorAll('CSS선택자')
            - html문서내 css선택자의 모든 마크업의 (dom)객체들을 배열로 반환하는 함수.

        - 속성

        4. .value
            - 지정된 (dom)객체의 value속성값 호출/대입
            - 사용가능한 마크업 : <input/>, <select/>, <textarea> 등등
            - 불가능한 마크업 : <div>, <table>, <span> 등등
            <호출> : document.quertSelector('선택자').value;
            <대입> : document.quertSelector('선택자').value = 새로운 값;

        5. .innerHTML
            - 지정된 (DOM)객체의 시작 마크업과 끝마크업의 >사이< 마크업의 html문자열 호출/대입
            - 사용가능한 마크업 : <div>, <span>, <table> 등등
            - 불가능한 마크업 : <input/>, <br/> <img/> 등등 - 혼자열고 혼자 닫는
            <호출> : document.quertSelector('선택자').innerHTML;
            <대입> : document.quertSelector('선택자').innerHTML = 새로운HTML;

        6. .style
            - 지정된 (DOM)객체의 style속성을 이용한 css조작.
            - 모든 마크업
            <호출> : document.quertSelector('선택자').style
            <대입> : document.quertSelector('선택자').style = 'CSS문법';

        7. .src
            - 지정된 마크업의 src속성값 호출/대입
            - 사용가능한 마크업 : <img src=""/>, <audio src=""/>, <video src=""/> 등등등

    3. document DOM Tree : HTML문서의 마크업 구조
        document
            -> <html>
                -> <head>
                    -> <title>
                    -> <style>
                -> <body>
                    -> <div>
                        -> <span>
                    -> <table>

*CSS 선택자 : CSS에서 HTML 마크업을 선택할 때 사용되는 식별자
    1. 마크업명
    2. .CLASS명
    3. #ID명
    4. 선택자A > 선택자B : 선택자A의 (바로아래 - 직계)하위 선택자B
    5. 선택자A 선택자B   : 선택자A의 (모든)하위 자손 선택자B